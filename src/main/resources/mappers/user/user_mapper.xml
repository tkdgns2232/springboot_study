<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--resultMap id가 이름 type은 entity 경로-->
<mapper namespace="com.korit.springboot_study.mapper.UserMapper">
    <resultMap id="userResultMap" type="com.korit.springboot_study.entity.User">
        <id property="userId" column="user_id" />
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="isAccountNonExpired" column="account_expired"/>
        <result property="isAccountNonLocked" column="account_locked"/>
        <result property="isCredentialsNonExpired" column="credentials_expired"/>
        <result property="isEnabled" column="account_enabled"/>
        <collection property="userRoles" resultMap="userRoleResultMap" />
    </resultMap>
    <resultMap id="userRoleResultMap" type="com.korit.springboot_study.entity.UserRole">
        <id property="userRoleId" column="user_role_id" />
        <result property="userId" column="user_Id"/>
        <result property="roleId" column="role_Id"/>
        <association property="role" resultMap="roleResultMap" />

    </resultMap>

    <resultMap id="roleResultMap" type="com.korit.springboot_study.entity.Role">
        <id property="roleId" column="role_id" />
        <result property="roleName" column="role_name"/>
    </resultMap>
    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into user_tb
        values(default, #{username}, #{password}, #{name}, #{email}, 1, 1, 1, 1)
    </insert>
    <update id="updateUserByID">
        update user_tb
        set
            email = #{email}
        where
            user_id = #{userId}
    </update>
    <delete id="deleteById">
        delete
        from
            user_tb
        where
            user_id = #{userId}
    </delete>

    <!--username으로 user객체 만들기 -->
    <select id="selectByUsername" resultMap="userResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.email,
            ut.account_expired,
            ut.account_locked,
            ut.credentials_expired,
            ut.account_enabled,

            urt.user_role_id,
            urt.user_id,
            urt.role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.username = #{username}
    </select>
    <select id="selectById" resultMap="userResultMap">
        select
            ut.user_id,
            ut.username,
            ut.password,
            ut.name,
            ut.email,
            ut.account_expired,
            ut.account_locked,
            ut.credentials_expired,
            ut.account_enabled,

            urt.user_role_id,
            urt.user_id,
            urt.role_id,

            rt.role_id,
            rt.role_name
        from
            user_tb ut
            left outer join user_role_tb urt on(urt.user_id = ut.user_id)
            left outer join role_tb rt on(rt.role_id = urt.role_id)
        where
            ut.user_id = #{userId}
    </select>
    <select id="selectAll" resultMap="userResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.name,
        ut.email,
        ut.account_expired,
        ut.account_locked,
        ut.credentials_expired,
        ut.account_enabled,

        urt.user_role_id,
        urt.user_id,
        urt.role_id,

        rt.role_id,
        rt.role_name
        from
        user_tb ut
        left outer join user_role_tb urt on(urt.user_id = ut.user_id)
        left outer join role_tb rt on(rt.role_id = urt.role_id)
    </select>
</mapper>
